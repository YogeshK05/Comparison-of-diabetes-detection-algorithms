# -*- coding: utf-8 -*-
"""Diabetes Prediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1o1hdQYq-VzhWv0BlGYNowZkjjucbL83V

Importing necessary libraries
"""

import numpy as np
import pandas as pd
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split
from sklearn import svm
from sklearn.metrics import accuracy_score
import warnings
warnings.filterwarnings("ignore")

"""Data Collection and Analysis

PIMA Diabetes Dataset
"""

# loading the diabetes dataset to a pandas Dataframe

diabetes_dataset = pd.read_csv('C:\Work\Codes\Python\AIML CP\Sem-II\Sample Data\diabetes.csv')

# printing the first 5 rows of the dataset
diabetes_dataset.head()

# number of rows and columns in this dataset

diabetes_dataset.shape

# Statistics of the data

diabetes_dataset.describe()

diabetes_dataset['Outcome'].value_counts()

"""0 -> Non Diabetic
1 -> Diabetic
"""

diabetes_dataset.groupby('Outcome').mean()

# Seperating data and labels

X = diabetes_dataset.drop(columns = 'Outcome', axis=1)
Y = diabetes_dataset['Outcome']

print(X)

print(Y)

"""Data Standardization"""

scaler = StandardScaler()

scaler.fit(X.values)

standardized_data = scaler.transform(X)

print(standardized_data)

X = standardized_data

print(X)
print(Y)

"""Train Test Split"""

X_train, X_test, Y_train, Y_test = train_test_split(X,Y, test_size = 0.2, stratify = Y, random_state = 2)

print(X.shape, X_train.shape, X_test.shape)

"""Training the Model"""

classifier = svm.SVC(kernel='linear')

# Training the SVM Classifier

classifier.fit(X_train, Y_train)

"""Model Evaluatin

Accuracy Score
"""

# Accuracy Score of the training data
X_train_prediction = classifier.predict(X_train)
training_data_accuracy = accuracy_score(X_train_prediction, Y_train)

print('Accuracy Score of The Training Data : ' , training_data_accuracy)

# Accuracy Score of the test data
X_test_prediction = classifier.predict(X_test)
testing_data_accuracy = accuracy_score(X_test_prediction, Y_test)

print('Accuracy Score of The Testing Data : ' , testing_data_accuracy)

"""Predictive System"""

input_data = (4,110,92,0,0,37.6,0.191,30)

# Changing the input data to numpy array

input_data_numpy_arr = np.asarray(input_data)

# Reshaping the array as we are predicting for one instance

input_data_reshape = input_data_numpy_arr.reshape(1, -1)

# Standardize the input data 

std_data = scaler.transform(input_data_reshape)
print(std_data)
prediction = classifier.predict(std_data)
print(prediction)

if(prediction[0] == 0):
    print('Hurray, Person is not Diabetic!')
else:
    print('Sorry, Person is Diabetic.')